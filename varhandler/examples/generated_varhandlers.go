// Code generated by "varhandler -func Status,Response,ResponseStatus"; DO NOT EDIT

package main

import "net/http"

func StatusHandler(w http.ResponseWriter, r *http.Request) {
	var err error

	param0, err := HTTPX(r)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusBadRequest, err)
		return
	}

	param1, err := HTTPY(r)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusBadRequest, err)
		return
	}

	param2, err := HTTPZ(r)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusBadRequest, err)
		return
	}

	var status int

	status, err = Status(param0, param1, param2)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusInternalServerError, err)
		return
	}

	if status != 0 {
		w.WriteHeader(status)
	}

}

func ResponseHandler(w http.ResponseWriter, r *http.Request) {
	var err error

	param0, err := HTTPX(r)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusBadRequest, err)
		return
	}

	param1, err := HTTPY(r)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusBadRequest, err)
		return
	}

	param2, err := HTTPZ(r)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusBadRequest, err)
		return
	}

	var resp interface{}

	resp, err = Response(param0, param1, param2)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusInternalServerError, err)
		return
	}

	if resp != nil {
		HandleHttpResponse(w, r, resp)
	}

}

func ResponseStatusHandler(w http.ResponseWriter, r *http.Request) {
	var err error

	param0, err := HTTPX(r)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusBadRequest, err)
		return
	}

	param1, err := HTTPY(r)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusBadRequest, err)
		return
	}

	param2, err := HTTPZ(r)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusBadRequest, err)
		return
	}

	var resp interface{}

	var status int

	resp, status, err = ResponseStatus(param0, param1, param2)
	if err != nil {
		HandleHttpErrorWithDefaultStatus(w, r, http.StatusInternalServerError, err)
		return
	}

	if status != 0 {
		w.WriteHeader(status)
	}

	if resp != nil {
		HandleHttpResponse(w, r, resp)
	}

}
