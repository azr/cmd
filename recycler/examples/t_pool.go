// Code generated by "github.com/azr/generators/recycler -type=T -output t_pool.go"; DO NOT EDIT

package examples

import "sync"

//NewTPool instantiates a typed pool of T
//TPool will be used to temporary store T objects
//for further usage and therefore save the memory
//allocation and garbage collection overhead.
//
//Any object can be freed at any time.
//Use a freelist if don't want any of those objects to be freed.
//See sync.Pool for a better understanding
func NewTPool() *TPool {
	return &TPool{
		sync.Pool{
			New: func() interface{} {
				return new(T)
			},
		},
	}
}

//TPool is a typed pool of T
//It temporarily stores instantiations
//of T for later use.
type TPool struct {
	sync.Pool
}

//Get instantiates a T if none is available
//in pool, otherwise an available one will be returned.
//see sync.Pool.Get
func (p TPool) Get() *T {
	return p.Pool.Get().(*T)
}

//Store a T into pool
//see sync.Pool.Put
func (p TPool) Put(t *T) {
	p.Pool.Put(t)
}
